// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TransactionForm renders properly 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TransactionForm />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <h2>
          Transaction
</h2>,
        <styled.div>
          <styled.label>
                    Transaction Type
          </styled.label>
          <styled.select
                    name="transactionType"
                    onChange={[Function]}
          >
                    <option
                              value="0"
                    >
                              Expense
                    </option>
                    <option
                              value="1"
                    >
                              Earning
                    </option>
          </styled.select>
</styled.div>,
        <styled.div>
          <styled.label>
                    Description
          </styled.label>
          <styled.input
                    bigger={true}
                    name="description"
                    onChange={[Function]}
                    type="text"
          />
</styled.div>,
        <styled.div>
          <styled.label>
                    Value
          </styled.label>
          <styled.input
                    name="value"
                    onChange={[Function]}
                    type="number"
          />
</styled.div>,
        <styled.div>
          <styled.label>
                    Data
          </styled.label>
          <Styled(DatePicker)
                    dateFormat="DD/MM/YYYY"
                    name="date"
                    onChange={[Function]}
                    selected={"2018-03-20T21:47:56.466Z"}
          />
</styled.div>,
        <styled.div>
          <styled.label>
                    Category
          </styled.label>
          <styled.select
                    name="category"
                    onChange={[Function]}
          >
                    
          </styled.select>
</styled.div>,
        <styled.button
          onClick={[Function]}
>
           Submit 
</styled.button>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Transaction",
        },
        "ref": null,
        "rendered": "Transaction",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <styled.label>
              Transaction Type
</styled.label>,
            <styled.select
              name="transactionType"
              onChange={[Function]}
>
              <option
                            value="0"
              >
                            Expense
              </option>
              <option
                            value="1"
              >
                            Earning
              </option>
</styled.select>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Transaction Type",
            },
            "ref": null,
            "rendered": "Transaction Type",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <option
                  value="0"
>
                  Expense
</option>,
                <option
                  value="1"
>
                  Earning
</option>,
              ],
              "name": "transactionType",
              "onChange": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Expense",
                  "value": "0",
                },
                "ref": null,
                "rendered": "Expense",
                "type": "option",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "Earning",
                  "value": "1",
                },
                "ref": null,
                "rendered": "Earning",
                "type": "option",
              },
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <styled.label>
              Description
</styled.label>,
            <styled.input
              bigger={true}
              name="description"
              onChange={[Function]}
              type="text"
/>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Description",
            },
            "ref": null,
            "rendered": "Description",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "bigger": true,
              "name": "description",
              "onChange": [Function],
              "type": "text",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <styled.label>
              Value
</styled.label>,
            <styled.input
              name="value"
              onChange={[Function]}
              type="number"
/>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Value",
            },
            "ref": null,
            "rendered": "Value",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "name": "value",
              "onChange": [Function],
              "type": "number",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <styled.label>
              Data
</styled.label>,
            <Styled(DatePicker)
              dateFormat="DD/MM/YYYY"
              name="date"
              onChange={[Function]}
              selected={"2018-03-20T21:47:56.466Z"}
/>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Data",
            },
            "ref": null,
            "rendered": "Data",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "dateFormat": "DD/MM/YYYY",
              "name": "date",
              "onChange": [Function],
              "selected": "2018-03-20T21:47:56.466Z",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <styled.label>
              Category
</styled.label>,
            <styled.select
              name="category"
              onChange={[Function]}
>
              
</styled.select>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Category",
            },
            "ref": null,
            "rendered": "Category",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [],
              "name": "category",
              "onChange": [Function],
            },
            "ref": null,
            "rendered": Array [],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": " Submit ",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": " Submit ",
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <h2>
            Transaction
</h2>,
          <styled.div>
            <styled.label>
                        Transaction Type
            </styled.label>
            <styled.select
                        name="transactionType"
                        onChange={[Function]}
            >
                        <option
                                    value="0"
                        >
                                    Expense
                        </option>
                        <option
                                    value="1"
                        >
                                    Earning
                        </option>
            </styled.select>
</styled.div>,
          <styled.div>
            <styled.label>
                        Description
            </styled.label>
            <styled.input
                        bigger={true}
                        name="description"
                        onChange={[Function]}
                        type="text"
            />
</styled.div>,
          <styled.div>
            <styled.label>
                        Value
            </styled.label>
            <styled.input
                        name="value"
                        onChange={[Function]}
                        type="number"
            />
</styled.div>,
          <styled.div>
            <styled.label>
                        Data
            </styled.label>
            <Styled(DatePicker)
                        dateFormat="DD/MM/YYYY"
                        name="date"
                        onChange={[Function]}
                        selected={"2018-03-20T21:47:56.466Z"}
            />
</styled.div>,
          <styled.div>
            <styled.label>
                        Category
            </styled.label>
            <styled.select
                        name="category"
                        onChange={[Function]}
            >
                        
            </styled.select>
</styled.div>,
          <styled.button
            onClick={[Function]}
>
             Submit 
</styled.button>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Transaction",
          },
          "ref": null,
          "rendered": "Transaction",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.label>
                Transaction Type
</styled.label>,
              <styled.select
                name="transactionType"
                onChange={[Function]}
>
                <option
                                value="0"
                >
                                Expense
                </option>
                <option
                                value="1"
                >
                                Earning
                </option>
</styled.select>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Transaction Type",
              },
              "ref": null,
              "rendered": "Transaction Type",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <option
                    value="0"
>
                    Expense
</option>,
                  <option
                    value="1"
>
                    Earning
</option>,
                ],
                "name": "transactionType",
                "onChange": [Function],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Expense",
                    "value": "0",
                  },
                  "ref": null,
                  "rendered": "Expense",
                  "type": "option",
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": "Earning",
                    "value": "1",
                  },
                  "ref": null,
                  "rendered": "Earning",
                  "type": "option",
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.label>
                Description
</styled.label>,
              <styled.input
                bigger={true}
                name="description"
                onChange={[Function]}
                type="text"
/>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Description",
              },
              "ref": null,
              "rendered": "Description",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "bigger": true,
                "name": "description",
                "onChange": [Function],
                "type": "text",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.label>
                Value
</styled.label>,
              <styled.input
                name="value"
                onChange={[Function]}
                type="number"
/>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Value",
              },
              "ref": null,
              "rendered": "Value",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "name": "value",
                "onChange": [Function],
                "type": "number",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.label>
                Data
</styled.label>,
              <Styled(DatePicker)
                dateFormat="DD/MM/YYYY"
                name="date"
                onChange={[Function]}
                selected={"2018-03-20T21:47:56.466Z"}
/>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Data",
              },
              "ref": null,
              "rendered": "Data",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "dateFormat": "DD/MM/YYYY",
                "name": "date",
                "onChange": [Function],
                "selected": "2018-03-20T21:47:56.466Z",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <styled.label>
                Category
</styled.label>,
              <styled.select
                name="category"
                onChange={[Function]}
>
                
</styled.select>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Category",
              },
              "ref": null,
              "rendered": "Category",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [],
                "name": "category",
                "onChange": [Function],
              },
              "ref": null,
              "rendered": Array [],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": " Submit ",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": " Submit ",
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
